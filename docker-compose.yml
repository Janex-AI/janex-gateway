services:
  postgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_volume:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend: &backend
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: development
    restart: unless-stopped
    ports:
      - "${SERVER_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/app
      - backend_tmp:/app/tmp
      # - backend_node_modules:/app/apps/frontend/node_modules
      # - backend_next_cache:/app/apps/frontend/.next
    environment:
      MODE: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL_MODE: ${DB_SSL_MODE}
      DB_SCHEMA: ${DB_SCHEMA}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DATABASE: ${REDIS_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      SERVER_ENVIRONMENT: ${SERVER_ENVIRONMENT}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FILE: ${LOG_FILE}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED}
      RATE_LIMIT_DEFAULT: ${RATE_LIMIT_DEFAULT}
      SKIP_CONTENT_FILTERING: ${SKIP_CONTENT_FILTERING}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # frontend:
  #   image: oven/bun:1-alpine
  #   working_dir: /app
  #   restart: unless-stopped
  #   ports:
  #     - "${FRONTEND_PORT}:3000"
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   volumes:
  #     - ./apps/frontend:/app
  #     - frontend_node_modules:/app/node_modules
  #     - frontend_next_cache:/app/.next
  #   environment:
  #     NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api
  #     WATCHPACK_POLLING: true
  #     NODE_ENV: development
  #   command: sh -c "bun install && bun run dev"
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_volume:
  redis_volume:
  backend_tmp:
  backend_node_modules:
  backend_next_cache:
  # frontend_node_modules:
  # frontend_next_cache: