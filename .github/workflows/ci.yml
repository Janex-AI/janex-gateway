name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       go-version: [ '1.25.x' ]
  #       os: [ ubuntu-latest, macos-latest, windows-latest ]

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: ${{ matrix.go-version }}

  #   - name: Cache Go modules
  #     uses: actions/cache@v4
  #     with:
  #       path: ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-

  #   - name: Install dependencies
  #     run: go mod download

  #   - name: Verify dependencies
  #     run: go mod verify

  #   - name: Run tests
  #     run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

  #   - name: Upload coverage to Codecov
  #     if: matrix.os == 'ubuntu-latest'
  #     uses: codecov/codecov-action@v4
  #     with:
  #       file: ./coverage.out
  #       flags: unittests
  #       name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

  # dependency-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

    - name: Run Nancy (dependency vulnerability scanner)
      run: |
        go install github.com/sonatypeoss/nancy@latest
        go list -json -deps ./... | nancy sleuth

  build:
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        BINARY_NAME=mcp-gateway
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-w -s" -o dist/${BINARY_NAME}-${GOOS}-${GOARCH} ./apps/backend/cmd/api

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-gateway-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
